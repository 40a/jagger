<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2010-2012 Grid Dynamics Consulting Services, Inc, All Rights Reserved
  ~ http://www.griddynamics.com
  ~
  ~ This library is free software; you can redistribute it and/or modify it under the terms of
  ~ the GNU Lesser General Public License as published by the Free Software Foundation; either
  ~ version 2.1 of the License, or any later version.
  ~
  ~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  ~ AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  ~ IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  ~ DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
  ~ FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  ~ DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  ~ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  ~ CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  ~ OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  ~ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  -->

<beans
        xmlns:jgr="http://www.griddynamics.com/schema/jagger-user"
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="
        http://www.griddynamics.com/schema/jagger-user
        http://www.griddynamics.com/schema/jagger-user.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"
        >


    <jgr:test-plan id="test-plan-1">
        <ref local="test1"/>
        <ref local="test2"/>
        <!--<ref local="test3"/>-->
    </jgr:test-plan>

    <jgr:test id="test1" name="user-test" duration="200">
        <jgr:task id="t3" name="3-groups-50-50-50" sample="1000" delay="0" bean="sleep5msServiceScenario" >
            <jgr:user id="u2" count="50" startCount="50" startIn="0" startBy="0" life="2h"/>
            <jgr:user id="u3" count="50" startCount="50" startIn="0" startBy="0" life="2h"/>
            <jgr:user id="u4" count="50" startCount="50" startIn="0" startBy="0" life="2h"/>
        </jgr:task>
        <jgr:task id="t4" name="virtual-user-100" sample="1000" delay="0" bean="sleep5msServiceScenario">
            <jgr:virtual-user id="vu1" count="100" tickInterval="10"/>
        </jgr:task>
    </jgr:test>

    <jgr:test id="test2" name="tps-test" duration="200">
        <jgr:task id="t5" name="tps-test" sample="1000" bean="sleep50msServiceScenario">
            <jgr:tps id="tps1" value="10"/>
        </jgr:task>
    </jgr:test>

    <jgr:test id="test3" name="invocation-test" duration="200" >
        <jgr:task id="t6" name="invocation-task" sample="1000" delay="0" bean="sleep50msServiceScenario">
            <jgr:invocation id="invocation1" exactcount ="1" threads="10"/>
        </jgr:task>
    </jgr:test>

    <bean id="processGenerator" class="com.griddynamics.jagger.master.configuration.TaskGenerator">
        <property name="config" ref="test-plan-1"/>
    </bean>

    <bean id="testTargetConfiguration" parent="abstractTestTargetConfiguration">
        <property name="tasks" value="#{processGenerator.generate()}"/>
    </bean>

    <bean id="abstractTestTargetConfiguration"
          class="com.griddynamics.jagger.master.configuration.Configuration" abstract="true">
        <property name="sessionExecutionListeners">
            <list>
                <ref bean="basicSessionCollector"/>
                <ref bean="basicAggregator"/>
            </list>
        </property>
        <property name="taskExecutionListeners">
            <list>
                <ref bean="basicSessionCollector"/>
                <ref bean="e1MasterCollector"/>
                <ref bean="basicAggregator"/>
                <ref bean="e1ScenarioAggregator"/>
                <ref bean="monitoringAggregator"/>
                <ref bean="durationLogProcessor"/>
            </list>
        </property>
    </bean>

    <bean id="testHttpTargetConfiguration" parent="abstractTestTargetConfiguration">
        <property name="tasks" value="#{taskUtilHttpDemo.generate()}"/>
    </bean>

    <bean id="testTcpTrafficTargetConfiguration" parent="abstractTestTargetConfiguration">
        <property name="tasks" value="#{taskUtilTcpTraffic.generate()}"/>
    </bean>

    <bean id="testTargetAbstractWorkload" abstract="true"
          class="com.griddynamics.jagger.engine.e1.scenario.WorkloadTask">
        <property name="collectors">
            <list>
                <ref bean="durationCollector"/>
                <ref bean="informationCollector"/>
                <ref bean="diagnosticCollector"/>
                <bean class="com.griddynamics.jagger.engine.e1.collector.ValidationCollectorProvider">
                    <property name="validator">
                        <bean class="com.griddynamics.jagger.engine.e1.scenario.ReflectionProvider">
                            <property name="clazz" value="com.griddynamics.jagger.engine.e1.collector.NotNullResponseValidator" />
                        </bean>
                    </property>
                </bean>
                <bean id="validationCollectorProvider"
                      class="com.griddynamics.jagger.engine.e1.collector.ValidationCollectorProvider">
                    <property name="validator">
                        <bean class="com.griddynamics.jagger.engine.e1.collector.ConsistencyValidatorProvider"/>
                    </property>
                </bean>
            </list>
        </property>
    </bean>

    <bean id="sleep5msServiceScenario" class="com.griddynamics.jagger.engine.e1.scenario.WorkloadTask"
          parent="testTargetAbstractWorkload">
        <property name="name" value="sleep-service-5ms"/>
        <property name="version" value="1"/>
        <property name="scenarioFactory" ref="sleep5msInvoker"/>
    </bean>

<!--<bean id="unreliableInvokerServiceScenario" class="com.griddynamics.jagger.engine.e1.scenario.WorkloadTask"-->
          <!--parent="testTargetAbstractWorkload">-->
        <!--<property name="name" value="unreliableInvoker-rate-0.001"/>-->
        <!--<property name="version" value="1"/>-->
        <!--<property name="scenarioFactory" ref="unreliableInvoker"/>-->
    <!--</bean>-->

    <bean id="sleep10msServiceScenario" class="com.griddynamics.jagger.engine.e1.scenario.WorkloadTask"
          parent="testTargetAbstractWorkload">
        <property name="name" value="sleep-service-10ms"/>
        <property name="version" value="1"/>
        <property name="scenarioFactory" ref="sleep10msInvoker"/>
    </bean>

    <bean id="sleep50msServiceScenario" class="com.griddynamics.jagger.engine.e1.scenario.WorkloadTask"
          parent="testTargetAbstractWorkload">
        <property name="name" value="sleep-service-50ms"/>
        <property name="version" value="1"/>
        <property name="scenarioFactory" ref="sleep50msInvoker"/>

    </bean>

    <bean id="sleepRandomServiceScenario" class="com.griddynamics.jagger.engine.e1.scenario.WorkloadTask"
          parent="testTargetAbstractWorkload">
        <property name="name" value="sleep-random-service-50-150ms"/>
        <property name="version" value="1"/>
        <property name="scenarioFactory" ref="sleepRandomServiceInvoker"/>
    </bean>

    <bean id="pulseServiceScenario" class="com.griddynamics.jagger.engine.e1.scenario.WorkloadTask"
          parent="testTargetAbstractWorkload">
        <property name="name" value="pulse-invoker"/>
        <property name="version" value="1"/>
        <property name="scenarioFactory" ref="pulseInvoker"/>
    </bean>

    <bean id="googlePageWithQueryPoolScenario" class="com.griddynamics.jagger.engine.e1.scenario.WorkloadTask"
          parent="testTargetAbstractWorkload">
        <property name="name" value="google-page-with-query-pool"/>
        <property name="version" value="1"/>
        <property name="scenarioFactory" ref="googlePageWithQueryPool"/>
    </bean>

    <bean id="tcpTrafficScenario" class="com.griddynamics.jagger.engine.e1.scenario.WorkloadTask"
          parent="testTargetAbstractWorkload">
        <property name="name" value="tcp-traffic-scenario"/>
        <property name="version" value="1"/>
        <property name="scenarioFactory" ref="tcpTrafficScenarioFactory"/>
    </bean>

    <bean id="taskUtilInternal" class="com.griddynamics.jagger.master.configuration.WorkloadTasksGenerator">
        <property name="prototypes">
            <list>
                <ref bean="sleep5msServiceScenario"/>
                <!--<ref bean="unreliableInvokerServiceScenario"/>-->
                <ref bean="sleep10msServiceScenario"/>
                <ref bean="pulseServiceScenario"/>
                <ref bean="sleepRandomServiceScenario"/>
            </list>
        </property>
        <property name="clocks">
            <list>
                <!--&lt;!&ndash; &ndash;&gt;-->
                <!--<bean class="com.griddynamics.jagger.engine.e1.scenario.VirtualUsersClockConfiguration">-->
                    <!--<property name="tickInterval" value="1000"/>-->
                    <!--<property name="users" value="1"/>-->
                <!--</bean>-->
                <!--<bean class="com.griddynamics.jagger.engine.e1.scenario.VirtualUsersClockConfiguration">-->
                    <!--<property name="tickInterval" value="1000"/>-->
                    <!--<property name="users" value="3"/>-->
                <!--</bean>-->
                <!--<bean class="com.griddynamics.jagger.engine.e1.scenario.VirtualUsersClockConfiguration">-->
                    <!--<property name="tickInterval" value="1000"/>-->
                    <!--<property name="users" value="7"/>-->
                <!--</bean>-->
                <bean class="com.griddynamics.jagger.engine.e1.scenario.VirtualUsersClockConfiguration">
                    <property name="tickInterval" value="1000"/>
                    <property name="users" value="14"/>
                </bean>
                <!--
                            <bean class="com.griddynamics.jagger.engine.e1.scenario.TpsClockConfiguration">
                                <property name="tps" value="10"/>
                                <property name="tickInterval" value="500"/>
                            </bean>

                            <bean class="com.griddynamics.jagger.engine.e1.scenario.TpsClockConfiguration">
                                <property name="tps" value="15"/>
                                <property name="tickInterval" value="500"/>
                            </bean>
                            <bean class="com.griddynamics.jagger.engine.e1.scenario.TpsClockConfiguration">
                                <property name="tps" value="25"/>
                                <property name="tickInterval" value="500"/>
                            </bean>
                            <bean class="com.griddynamics.jagger.engine.e1.scenario.TpsClockConfiguration">
                                <property name="tps" value="50"/>
                                <property name="tickInterval" value="500"/>
                            </bean>
                             -->
            </list>
        </property>
        <property name="terminations">
            <list>
                <bean class="com.griddynamics.jagger.engine.e1.scenario.TerminateByDuration">
                    <property name="seconds" value="10"/>
                </bean>
            </list>
        </property>
        <property name="attendantMonitoring">
            <bean class="com.griddynamics.jagger.monitoring.MonitoringTask">
                <property name="name" value="Monitoring"/>
                <property name="terminationStrategy">
                    <bean class="com.griddynamics.jagger.monitoring.InfiniteDuration"/>
                </property>
            </bean>
        </property>
    </bean>

    <bean id="taskUtilHttpDemo" class="com.griddynamics.jagger.master.configuration.WorkloadTasksGenerator">
        <property name="prototypes">
            <list>
                <ref bean="googlePageWithQueryPoolScenario"/>
            </list>
        </property>
        <property name="clocks">
            <list>
                <bean class="com.griddynamics.jagger.engine.e1.scenario.TpsClockConfiguration">
                    <property name="tps" value="10"/>
                    <property name="tickInterval" value="500"/>
                </bean>
            </list>
        </property>
        <property name="terminations">
            <list>
                <bean class="com.griddynamics.jagger.engine.e1.scenario.TerminateByDuration">
                    <property name="seconds" value="30"/>
                </bean>
                <bean class="com.griddynamics.jagger.engine.e1.scenario.TerminateByTotalSampling">
                    <property name="samples" value="200"/>
                </bean>
            </list>
        </property>
    </bean>

    <bean id="taskUtilTcpTraffic" class="com.griddynamics.jagger.master.configuration.WorkloadTasksGenerator">
        <property name="prototypes">
            <list>
                <ref bean="tcpTrafficScenario"/>
            </list>
        </property>
        <property name="clocks">
            <list>
                <bean class="com.griddynamics.jagger.engine.e1.scenario.VirtualUsersClockConfiguration">
                    <property name="tickInterval" value="1000"/>
                    <property name="users" value="1"/>
                </bean>
            </list>
        </property>
        <property name="terminations">
            <list>
                <bean class="com.griddynamics.jagger.engine.e1.scenario.TerminateByDuration">
                    <property name="seconds" value="2"/>
                </bean>
            </list>
        </property>
        <property name="attendantMonitoring">
            <bean class="com.griddynamics.jagger.monitoring.MonitoringTask">
                <property name="name" value="Monitoring"/>
                <property name="terminationStrategy">
                    <bean class="com.griddynamics.jagger.monitoring.InfiniteDuration"/>
                </property>
            </bean>
        </property>
    </bean>

</beans>
